version: 2.1

orbs:   
  aws-cli: circleci/aws-cli@2.0.3 
  aws-eks: circleci/aws-eks@0.2.3
  aws-ecr: circleci/aws-ecr@7.2.0
  kubernetes: circleci/kubernetes@0.4.0
#  ------------------------------------------------------------------------------------------------------------------------------------------
#  defaults (like global variables dubstiuted below)
#  ------------------------------------------------------------------------------------------------------------------------------------------
docvarnode: &dok_node
    docker:
      - image: circleci/node:13.8.0

docvaraws: &dok_awscli
    docker:
      - image: amazon/aws-cli    

docansibl: &dok_ansible
    docker:
      - image: python:3.7-alpine3.11 

docjava: &dok_java
    docker:      
      - image: cimg/openjdk:16.0.2

#  ------------------------------------------------------------------------------------------------------------------------------------------
#  list of parameters
#  ------------------------------------------------------------------------------------------------------------------------------------------

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

#  ------------------------------------------------------------------------------------------------------------------------------------------
#    Jobs list startd from here    
#
#
#  ------------------------------------------------------------------------------------------------------------------------------------------

jobs:
# -----------------------------  Linting step for docker file   -----------------------------------------------------------------------------
  lint-dockerfile:
    <<: *dok_node
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Lint
          command: |
            hadolint Dockerfile        

# -----------------------------  build the app   -------------------------------------------------------------------------------------------
  build-app:
    <<: *dok_java        
    environment:      
      MAVEN_OPTS: -Xmx3200m
    steps:    
      - checkout      
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}                    
      - run: 
          name: check dependancy
          command: |
            mvn dependency:go-offline                            
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}      
      - run: 
          name: maven build
          command: |
            mvn package
            ls
      - save_cache:
          paths: [target]
          key: jar-file
# -----------------------------  build and push the docker image to docker hub --------------------------------------------------------------
  
  build-push-dockerimage:
    <<: *dok_java            
    steps:    
      - checkout      
      - restore_cache:
          keys: [jar-file]
      - setup_remote_docker:  
          version: 19.03.13          
      - run:
          name: Build Docker Image
          paths:
            - target
          command: |
            ls                        
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker build -t scienceselva/capstone:awsdevops .               
            docker push scienceselva/capstone:awsdevops  

# ----------------------------------------------------------------------------------------------------------------------------------------
#  create AWS infrastructure
#    Kubectl clusters and nodes with AWS EKS Orbs abvailable in circle ci
#    and test the pods
# ----------------------------------------------------------------------------------------------------------------------------------------


#    NOT RUNNING CURRENTLY done thro orbs  
  deploy-infrastructure:
    <<: *dok_awscli         
    steps:
      - checkout
      - run:
          name: install dependancy
          command: yum install -y tar gzip
      - run:
          name: deploy cluster infrastructure
          command: |
            aws cloudformation deploy \                            
              --stack-name EKS-create \
              --template-body  awscf/createcluster.yml \
              --parameters clusterconfig.json \
              --region us-west-2 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: deploy nodes infrastructure
          command: |
            aws cloudformation deploy \                            
              --stack-name EKS-node \
              --template-body  awscf/createnodes.yml \
              --parameters nodeconfig.json \
              --region us-west-2 \
              --capabilities CAPABILITY_NAMED_IAM 
                     
# ----------------------------------------------------------------------------------------------------------------------------------------
  setup-cluster-with-params:      
      executor: aws-eks/python3
      steps:
        - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "
            https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname
            -s)_amd64.tar.gz" \
            | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
        - save_cache:
            paths: ./
            key: eksctl-file            
# ----------------------------------------------------------------------------------------------------------------------------------------
  deploy-application:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        docker-image-name:
          description: |
            Name of the docker image to be deployed
          type: string
        version-info:
          description: |
            App version information
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-west-2"
      steps:
        - checkout        
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>                      
        - kubernetes/create-or-update-resource:            
            resource-file-path: "deploys/deploy.yml"
            resource-name: deployment/capstone
            get-rollout-status: true
            show-kubectl-command: true            
#        - kubernetes/create-or-update-resource:
#            resource-file-path: "deploys/deploy.yml"

# ----------------------------------------------------------------------------------------------------------------------------------
#    Test the application
# ----------------------------------------------------------------------------------------------------------------------------------
  test-application:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: ""
        expected-version-info:
          description: |
            Expected app version (this is used for testing that the
            correct version has been deployed)
          type: string
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - run:
            name: Wait for service to be ready
            command: |
              kubectl get pods
              kubectl get services
# -------------------------------------------------------------------------------
#
#         WORKFLOW  STEPS STARTS FROM HERE
#
# -------------------------------------------------------------------------------
workflows:
  default:
    jobs:
      - lint-dockerfile
      - build-app:
          requires: [lint-dockerfile]
      - build-push-dockerimage:
          requires: [build-app]
      - aws-ecr/build-and-push-image:
          name: build-and-push-image-ecr
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: scienceselva
          docker-login: true
          dockerhub-username: DOCKER_USERNAME
          dockerhub-password: DOCKER_PASSWORD
          dockerfile: dockerhub
          tag: capstone
          requires: [build-push-dockerimage]
      - setup-cluster-with-params:
          requires: 
            - build-and-push-image-ecr
      - aws-eks/create-cluster:            
          name: create-eks-cluster
          node-type: "t2.micro"
          nodes: 2
          nodes-min: 1
          nodes-max: 3
          cluster-name: capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: AWS_DEFAULT_REGION
          requires: 
            - build-and-push-image-ecr
      - deploy-application:
          cluster-name: selva-capstone-cluster
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_URL}/scienceselva:capstone"
          version-info: "capstonev1"
          requires: 
            - create-eks-cluster
#      - test-application:
#          cluster-name: capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
#          aws-region: $AWS_DEFAULT_REGION
#          expected-version-info: "capblue"
#          requires:
#            - deploy-application

            